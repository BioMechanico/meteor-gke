gcloud preview container clusters create hello-world \
    --num-nodes 1 \
    --machine-type g1-small

gcloud compute instances list

gcloud preview container pods create \
    --name wordpress \
    --image=tutum/wordpress \
    --port=80



gcloud preview container pods create --config-file mongo-pod.json

gcloud preview container services create --config-file mongo-service.json



meteor build ../ff --architecture os.linux.x86_64


docker build -t="chees/meteor-testje" .
docker push chees/meteor-testje

docker run chees/meteor-testje

gcloud preview container replicationcontrollers create --config-file meteor-controller.json

gcloud preview container services create --config-file meteor-service.json

gcloud compute firewall-rules create meteor-80 --allow=tcp:80 --target-tags k8s-meteor-node



~/projects/gke $ gcloud preview container pods list
NAME                                   IMAGE(S)                HOST                                                           LABELS                  STATUS
mongo                                  mongo                   k8s-meteor-node-1.c.river-bruin-797.internal/199.223.236.148   name=mongo,role=mongo   Running
18c33215-8638-11e4-af38-42010af00621   chees/meteor-testje:1   k8s-meteor-node-2.c.river-bruin-797.internal/130.211.190.133   name=meteor             Running
18c456f0-8638-11e4-af38-42010af00621   chees/meteor-testje:1   k8s-meteor-node-1.c.river-bruin-797.internal/199.223.236.148   name=meteor             Running

~/projects/gke $ gcloud preview container replicationcontrollers list
NAME                IMAGE(S)                SELECTOR            REPLICAS
meteor-controller   chees/meteor-testje:1   name=meteor         2

~/projects/gke $ gcloud preview container services list
NAME                LABELS              SELECTOR                                  IP                  PORT
kubernetes                              component=apiserver,provider=kubernetes   10.87.251.51        443
kubernetes-ro                           component=apiserver,provider=kubernetes   10.87.249.67        80
mongo               name=mongo          name=mongo,role=mongo                     10.87.255.40        27017
meteor                                  name=meteor                               10.87.251.36        80


Questions:

There are many overlapping technologies now. How do these relate?
Kubernetes
Container Engine
Managed VMs
Deployment Manager
Instance Group Manager (used to be Replica Pools?)





TODO
- enable oplog
- load testing tool
- deploy scripts
- docs
- blog post
- change number of replicas for scaling
- 

- Visual overview of architecture




cloudcfg.sh -u 15s rollingupdate dataController


./kubecfg.sh --server=https://146.148.12.83 --auth-path=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/kubernetes_auth --certificate-authority=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/ca.crt --client-key=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/kubecfg.key --client-certificate=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/kubecfg.crt -u 15s rollingupdate meteor-controller

./kubecfg.sh --auth=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/kubernetes_auth --certificate_authority=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/ca.crt --client_key=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/kubecfg.key --client_certificate=/Users/christiaan/.config/gcloud/kubernetes/river-bruin-797.europe-west1-c.meteor/kubecfg.crt -u 15s rollingupdate meteor-controller



Use Kubernetes directly instead of GKE:

cluster/kubectl.sh get pods
cluster/kubectl.sh get replicationcontrollers

cluster/kubectl.sh create -f ~/projects/gke/mongo-pod.json
cluster/kubectl.sh create -f ~/projects/gke/mongo-service.json
cluster/kubectl.sh create -f ~/projects/gke/meteor-controller.json
cluster/kubectl.sh create -f ~/projects/gke/meteor-service.json
gcloud compute firewall-rules create meteor-80 --allow=tcp:80 --target-tags kubernetes-minion

gcloud compute forwarding-rules list

# Now we can use kubecfg.sh to do a rolling update:
cluster/kubecfg.sh -u 15s rollingupdate meteor-controller

This still doesn't seem to pick up the latest image :(
So... how do we do updates?

When we use `kubectl.sh` instead of `gcloud preview container` the load balancer in meteor-service doesn't use session affinity so can't be used for Meteor.


Kubernetes cleanup:
gcloud preview container clusters delete meteor
gcloud compute forwarding-rules delete meteor --quiet
gcloud compute target-pools delete meteor --quiet
gcloud compute firewall-rules delete meteor-80 --quiet



http://stackoverflow.com/questions/26788485/how-do-i-run-private-docker-images-on-google-container-engine



TODO clean up files
TODO createdisk in createcluster and rename to setup.sh
TODO documentation on how to use the Dockerfile
TODO update script



Ideal steps:
One time:
- meteor add gke
- edit Dockerfile (FROM meteorgke or something like that)
- edit gkeconfig to set your region, zone and amount of frontend instances you want, etc.
- meteor gke createcluster (should automatically run createdisk if needed) (could also have a wizard to create and edit the Dockerfile and gkeconfig)
Every deploy:
- meteor gke deploy 3 (builds and pushes your meteor app as version 3, creates a replicationcontroller for version 3, deletes replicationcontrollers for older versions and deletes pods for older versions one by one)

